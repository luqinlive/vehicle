// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VehicleRecog.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from VehicleRecog.proto</summary>
  public static partial class VehicleRecogReflection {

    #region Descriptor
    /// <summary>File descriptor for VehicleRecog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VehicleRecogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJWZWhpY2xlUmVjb2cucHJvdG8iTgoLVmVoaWNsZUluZm8SCgoCSWQYASAB",
            "KAkSEQoJaW1hZ2VwYXRoGAIgASgJEhIKCmpzb25yZXN1bHQYAyABKAkSDAoE",
            "dXVpZBgEIAEoCUIMqgIJRGF0YVR5cGVzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.VehicleInfo), global::DataTypes.VehicleInfo.Parser, new[]{ "Id", "Imagepath", "Jsonresult", "Uuid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VehicleInfo : pb::IMessage<VehicleInfo> {
    private static readonly pb::MessageParser<VehicleInfo> _parser = new pb::MessageParser<VehicleInfo>(() => new VehicleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.VehicleRecogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleInfo(VehicleInfo other) : this() {
      id_ = other.id_;
      imagepath_ = other.imagepath_;
      jsonresult_ = other.jsonresult_;
      uuid_ = other.uuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleInfo Clone() {
      return new VehicleInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imagepath" field.</summary>
    public const int ImagepathFieldNumber = 2;
    private string imagepath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imagepath {
      get { return imagepath_; }
      set {
        imagepath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jsonresult" field.</summary>
    public const int JsonresultFieldNumber = 3;
    private string jsonresult_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Jsonresult {
      get { return jsonresult_; }
      set {
        jsonresult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 4;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Imagepath != other.Imagepath) return false;
      if (Jsonresult != other.Jsonresult) return false;
      if (Uuid != other.Uuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Imagepath.Length != 0) hash ^= Imagepath.GetHashCode();
      if (Jsonresult.Length != 0) hash ^= Jsonresult.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Imagepath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Imagepath);
      }
      if (Jsonresult.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Jsonresult);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Imagepath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imagepath);
      }
      if (Jsonresult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Jsonresult);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Imagepath.Length != 0) {
        Imagepath = other.Imagepath;
      }
      if (other.Jsonresult.Length != 0) {
        Jsonresult = other.Jsonresult;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Imagepath = input.ReadString();
            break;
          }
          case 26: {
            Jsonresult = input.ReadString();
            break;
          }
          case 34: {
            Uuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
