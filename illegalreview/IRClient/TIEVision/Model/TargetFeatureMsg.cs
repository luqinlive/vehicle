// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TargetFeatureMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DataTypes {

  /// <summary>Holder for reflection information generated from TargetFeatureMsg.proto</summary>
  public static partial class TargetFeatureMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for TargetFeatureMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TargetFeatureMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZUYXJnZXRGZWF0dXJlTXNnLnByb3RvInwKDVRhcmdldEZlYXR1cmUSCQoB",
            "eBgBIAEoBRIJCgF5GAIgASgFEg0KBXdpZHRoGAMgASgFEg4KBmhlaWdodBgE",
            "IAEoBRIMCgR0eXBlGAUgASgFEhIKCkFwcEZlYXR1cmUYBiADKAESFAoMQ29s",
            "b3JGZWF0dXJlGAcgAygBIrEBCgxUYXJnZXRSZXN1bHQSEAoIb2JqZWN0SWQY",
            "ASABKAkSEQoJaW1hZ2VwYXRoGAIgASgJEg0KBXNjb3JlGAMgASgBEhAKCGFw",
            "cHNjb3JlGAQgASgBEhIKCmNvbG9yc2NvcmUYBSABKAESEAoIcGFzc3RpbWUY",
            "BiABKAkSEAoIbG9jYXRpb24YByABKAkSEgoKdGFyZ2V0dHlwZRgIIAEoCRIP",
            "CgdrZXlyZWN0GAkgASgJItoBChBUYXJnZXRGZWF0dXJlTXNnEhgKBk1zZ0Nt",
            "ZBgBIAEoDjIILk1TR19DTUQSDAoEVXVpZBgCIAEoCRIRCglUaW1lU3RhcnQY",
            "AyABKAkSDwoHVGltZUVuZBgEIAEoCRITCgtJbWFnZUJhc2U2NBgFIAEoCRIR",
            "Cglwcm9jZXNzZWQYBiABKAUSKQoRdGFyZ2V0RmVhdHVyZUxpc3QYByADKAsy",
            "Di5UYXJnZXRGZWF0dXJlEicKEHRhcmdldFJlc3VsdExpc3QYCCADKAsyDS5U",
            "YXJnZXRSZXN1bHQqggEKB01TR19DTUQSFAoQVEFSR0VUX0RFVEVDVElPThAA",
            "Eg8KC1RBUkdFVF9PUEVOEAESFgoSVEFSR0VUX0NPTVBBU1JJU09OEAISEAoM",
            "VEFSR0VUX0NMT1NFEAMSEgoOVEFSR0VUX1BST0NFU1MQBBISCg5UQVJHRVRf",
            "UkVTVUxUUxAFQgyqAglEYXRhVHlwZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataTypes.MSG_CMD), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.TargetFeature), global::DataTypes.TargetFeature.Parser, new[]{ "X", "Y", "Width", "Height", "Type", "AppFeature", "ColorFeature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.TargetResult), global::DataTypes.TargetResult.Parser, new[]{ "ObjectId", "Imagepath", "Score", "Appscore", "Colorscore", "Passtime", "Location", "Targettype", "Keyrect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DataTypes.TargetFeatureMsg), global::DataTypes.TargetFeatureMsg.Parser, new[]{ "MsgCmd", "Uuid", "TimeStart", "TimeEnd", "ImageBase64", "Processed", "TargetFeatureList", "TargetResultList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MSG_CMD {
    [pbr::OriginalName("TARGET_DETECTION")] TargetDetection = 0,
    [pbr::OriginalName("TARGET_OPEN")] TargetOpen = 1,
    [pbr::OriginalName("TARGET_COMPASRISON")] TargetCompasrison = 2,
    [pbr::OriginalName("TARGET_CLOSE")] TargetClose = 3,
    [pbr::OriginalName("TARGET_PROCESS")] TargetProcess = 4,
    [pbr::OriginalName("TARGET_RESULTS")] TargetResults = 5,
  }

  #endregion

  #region Messages
  public sealed partial class TargetFeature : pb::IMessage<TargetFeature> {
    private static readonly pb::MessageParser<TargetFeature> _parser = new pb::MessageParser<TargetFeature>(() => new TargetFeature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetFeature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.TargetFeatureMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetFeature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetFeature(TargetFeature other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      type_ = other.type_;
      appFeature_ = other.appFeature_.Clone();
      colorFeature_ = other.colorFeature_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetFeature Clone() {
      return new TargetFeature(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "AppFeature" field.</summary>
    public const int AppFeatureFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_appFeature_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> appFeature_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AppFeature {
      get { return appFeature_; }
    }

    /// <summary>Field number for the "ColorFeature" field.</summary>
    public const int ColorFeatureFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_colorFeature_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> colorFeature_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ColorFeature {
      get { return colorFeature_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetFeature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetFeature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Type != other.Type) return false;
      if(!appFeature_.Equals(other.appFeature_)) return false;
      if(!colorFeature_.Equals(other.colorFeature_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= appFeature_.GetHashCode();
      hash ^= colorFeature_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      appFeature_.WriteTo(output, _repeated_appFeature_codec);
      colorFeature_.WriteTo(output, _repeated_colorFeature_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += appFeature_.CalculateSize(_repeated_appFeature_codec);
      size += colorFeature_.CalculateSize(_repeated_colorFeature_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetFeature other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      appFeature_.Add(other.appFeature_);
      colorFeature_.Add(other.colorFeature_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 50:
          case 49: {
            appFeature_.AddEntriesFrom(input, _repeated_appFeature_codec);
            break;
          }
          case 58:
          case 57: {
            colorFeature_.AddEntriesFrom(input, _repeated_colorFeature_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TargetResult : pb::IMessage<TargetResult> {
    private static readonly pb::MessageParser<TargetResult> _parser = new pb::MessageParser<TargetResult>(() => new TargetResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.TargetFeatureMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetResult(TargetResult other) : this() {
      objectId_ = other.objectId_;
      imagepath_ = other.imagepath_;
      score_ = other.score_;
      appscore_ = other.appscore_;
      colorscore_ = other.colorscore_;
      passtime_ = other.passtime_;
      location_ = other.location_;
      targettype_ = other.targettype_;
      keyrect_ = other.keyrect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetResult Clone() {
      return new TargetResult(this);
    }

    /// <summary>Field number for the "objectId" field.</summary>
    public const int ObjectIdFieldNumber = 1;
    private string objectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectId {
      get { return objectId_; }
      set {
        objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imagepath" field.</summary>
    public const int ImagepathFieldNumber = 2;
    private string imagepath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imagepath {
      get { return imagepath_; }
      set {
        imagepath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private double score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "appscore" field.</summary>
    public const int AppscoreFieldNumber = 4;
    private double appscore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Appscore {
      get { return appscore_; }
      set {
        appscore_ = value;
      }
    }

    /// <summary>Field number for the "colorscore" field.</summary>
    public const int ColorscoreFieldNumber = 5;
    private double colorscore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Colorscore {
      get { return colorscore_; }
      set {
        colorscore_ = value;
      }
    }

    /// <summary>Field number for the "passtime" field.</summary>
    public const int PasstimeFieldNumber = 6;
    private string passtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passtime {
      get { return passtime_; }
      set {
        passtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 7;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targettype" field.</summary>
    public const int TargettypeFieldNumber = 8;
    private string targettype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Targettype {
      get { return targettype_; }
      set {
        targettype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keyrect" field.</summary>
    public const int KeyrectFieldNumber = 9;
    private string keyrect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Keyrect {
      get { return keyrect_; }
      set {
        keyrect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectId != other.ObjectId) return false;
      if (Imagepath != other.Imagepath) return false;
      if (Score != other.Score) return false;
      if (Appscore != other.Appscore) return false;
      if (Colorscore != other.Colorscore) return false;
      if (Passtime != other.Passtime) return false;
      if (Location != other.Location) return false;
      if (Targettype != other.Targettype) return false;
      if (Keyrect != other.Keyrect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
      if (Imagepath.Length != 0) hash ^= Imagepath.GetHashCode();
      if (Score != 0D) hash ^= Score.GetHashCode();
      if (Appscore != 0D) hash ^= Appscore.GetHashCode();
      if (Colorscore != 0D) hash ^= Colorscore.GetHashCode();
      if (Passtime.Length != 0) hash ^= Passtime.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Targettype.Length != 0) hash ^= Targettype.GetHashCode();
      if (Keyrect.Length != 0) hash ^= Keyrect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectId);
      }
      if (Imagepath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Imagepath);
      }
      if (Score != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Score);
      }
      if (Appscore != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Appscore);
      }
      if (Colorscore != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Colorscore);
      }
      if (Passtime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Passtime);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Location);
      }
      if (Targettype.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Targettype);
      }
      if (Keyrect.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Keyrect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
      }
      if (Imagepath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imagepath);
      }
      if (Score != 0D) {
        size += 1 + 8;
      }
      if (Appscore != 0D) {
        size += 1 + 8;
      }
      if (Colorscore != 0D) {
        size += 1 + 8;
      }
      if (Passtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passtime);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Targettype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Targettype);
      }
      if (Keyrect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyrect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetResult other) {
      if (other == null) {
        return;
      }
      if (other.ObjectId.Length != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.Imagepath.Length != 0) {
        Imagepath = other.Imagepath;
      }
      if (other.Score != 0D) {
        Score = other.Score;
      }
      if (other.Appscore != 0D) {
        Appscore = other.Appscore;
      }
      if (other.Colorscore != 0D) {
        Colorscore = other.Colorscore;
      }
      if (other.Passtime.Length != 0) {
        Passtime = other.Passtime;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Targettype.Length != 0) {
        Targettype = other.Targettype;
      }
      if (other.Keyrect.Length != 0) {
        Keyrect = other.Keyrect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ObjectId = input.ReadString();
            break;
          }
          case 18: {
            Imagepath = input.ReadString();
            break;
          }
          case 25: {
            Score = input.ReadDouble();
            break;
          }
          case 33: {
            Appscore = input.ReadDouble();
            break;
          }
          case 41: {
            Colorscore = input.ReadDouble();
            break;
          }
          case 50: {
            Passtime = input.ReadString();
            break;
          }
          case 58: {
            Location = input.ReadString();
            break;
          }
          case 66: {
            Targettype = input.ReadString();
            break;
          }
          case 74: {
            Keyrect = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TargetFeatureMsg : pb::IMessage<TargetFeatureMsg> {
    private static readonly pb::MessageParser<TargetFeatureMsg> _parser = new pb::MessageParser<TargetFeatureMsg>(() => new TargetFeatureMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetFeatureMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DataTypes.TargetFeatureMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetFeatureMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetFeatureMsg(TargetFeatureMsg other) : this() {
      msgCmd_ = other.msgCmd_;
      uuid_ = other.uuid_;
      timeStart_ = other.timeStart_;
      timeEnd_ = other.timeEnd_;
      imageBase64_ = other.imageBase64_;
      processed_ = other.processed_;
      targetFeatureList_ = other.targetFeatureList_.Clone();
      targetResultList_ = other.targetResultList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetFeatureMsg Clone() {
      return new TargetFeatureMsg(this);
    }

    /// <summary>Field number for the "MsgCmd" field.</summary>
    public const int MsgCmdFieldNumber = 1;
    private global::DataTypes.MSG_CMD msgCmd_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DataTypes.MSG_CMD MsgCmd {
      get { return msgCmd_; }
      set {
        msgCmd_ = value;
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeStart" field.</summary>
    public const int TimeStartFieldNumber = 3;
    private string timeStart_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeStart {
      get { return timeStart_; }
      set {
        timeStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeEnd" field.</summary>
    public const int TimeEndFieldNumber = 4;
    private string timeEnd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeEnd {
      get { return timeEnd_; }
      set {
        timeEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ImageBase64" field.</summary>
    public const int ImageBase64FieldNumber = 5;
    private string imageBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageBase64 {
      get { return imageBase64_; }
      set {
        imageBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processed" field.</summary>
    public const int ProcessedFieldNumber = 6;
    private int processed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Processed {
      get { return processed_; }
      set {
        processed_ = value;
      }
    }

    /// <summary>Field number for the "targetFeatureList" field.</summary>
    public const int TargetFeatureListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::DataTypes.TargetFeature> _repeated_targetFeatureList_codec
        = pb::FieldCodec.ForMessage(58, global::DataTypes.TargetFeature.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.TargetFeature> targetFeatureList_ = new pbc::RepeatedField<global::DataTypes.TargetFeature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataTypes.TargetFeature> TargetFeatureList {
      get { return targetFeatureList_; }
    }

    /// <summary>Field number for the "targetResultList" field.</summary>
    public const int TargetResultListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::DataTypes.TargetResult> _repeated_targetResultList_codec
        = pb::FieldCodec.ForMessage(66, global::DataTypes.TargetResult.Parser);
    private readonly pbc::RepeatedField<global::DataTypes.TargetResult> targetResultList_ = new pbc::RepeatedField<global::DataTypes.TargetResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DataTypes.TargetResult> TargetResultList {
      get { return targetResultList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetFeatureMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetFeatureMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgCmd != other.MsgCmd) return false;
      if (Uuid != other.Uuid) return false;
      if (TimeStart != other.TimeStart) return false;
      if (TimeEnd != other.TimeEnd) return false;
      if (ImageBase64 != other.ImageBase64) return false;
      if (Processed != other.Processed) return false;
      if(!targetFeatureList_.Equals(other.targetFeatureList_)) return false;
      if(!targetResultList_.Equals(other.targetResultList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgCmd != 0) hash ^= MsgCmd.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (TimeStart.Length != 0) hash ^= TimeStart.GetHashCode();
      if (TimeEnd.Length != 0) hash ^= TimeEnd.GetHashCode();
      if (ImageBase64.Length != 0) hash ^= ImageBase64.GetHashCode();
      if (Processed != 0) hash ^= Processed.GetHashCode();
      hash ^= targetFeatureList_.GetHashCode();
      hash ^= targetResultList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgCmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MsgCmd);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (TimeStart.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TimeStart);
      }
      if (TimeEnd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TimeEnd);
      }
      if (ImageBase64.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ImageBase64);
      }
      if (Processed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Processed);
      }
      targetFeatureList_.WriteTo(output, _repeated_targetFeatureList_codec);
      targetResultList_.WriteTo(output, _repeated_targetResultList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgCmd);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (TimeStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeStart);
      }
      if (TimeEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeEnd);
      }
      if (ImageBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageBase64);
      }
      if (Processed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Processed);
      }
      size += targetFeatureList_.CalculateSize(_repeated_targetFeatureList_codec);
      size += targetResultList_.CalculateSize(_repeated_targetResultList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetFeatureMsg other) {
      if (other == null) {
        return;
      }
      if (other.MsgCmd != 0) {
        MsgCmd = other.MsgCmd;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.TimeStart.Length != 0) {
        TimeStart = other.TimeStart;
      }
      if (other.TimeEnd.Length != 0) {
        TimeEnd = other.TimeEnd;
      }
      if (other.ImageBase64.Length != 0) {
        ImageBase64 = other.ImageBase64;
      }
      if (other.Processed != 0) {
        Processed = other.Processed;
      }
      targetFeatureList_.Add(other.targetFeatureList_);
      targetResultList_.Add(other.targetResultList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            msgCmd_ = (global::DataTypes.MSG_CMD) input.ReadEnum();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 26: {
            TimeStart = input.ReadString();
            break;
          }
          case 34: {
            TimeEnd = input.ReadString();
            break;
          }
          case 42: {
            ImageBase64 = input.ReadString();
            break;
          }
          case 48: {
            Processed = input.ReadInt32();
            break;
          }
          case 58: {
            targetFeatureList_.AddEntriesFrom(input, _repeated_targetFeatureList_codec);
            break;
          }
          case 66: {
            targetResultList_.AddEntriesFrom(input, _repeated_targetResultList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
